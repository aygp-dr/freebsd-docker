#+TITLE: FreeBSD Docker Image Repository
#+AUTHOR: Aidan Pace
#+EMAIL: apace@defrecord.com
#+PROPERTY: header-args :mkdirp t
#+PROPERTY: header-args:bash :shebang "#!/bin/bash"
#+STARTUP: overview

* Overview

Tangle this file to generate a complete FreeBSD Docker image repository.

#+begin_src bash :tangle no
# Tangle: C-c C-v t
# Or: emacs --batch -l org --eval "(org-babel-tangle-file \"setup.org\")"
#+end_src

* Docker Core

** Dockerfile

#+begin_src dockerfile :tangle Dockerfile
FROM alpine:3.19

ARG FREEBSD_VERSION=14.0-RELEASE

RUN apk add --no-cache \
    qemu-system-x86_64 \
    qemu-img \
    curl \
    bash \
    openssh-client

WORKDIR /freebsd

RUN ARCH="amd64" && \
    VERSION="${FREEBSD_VERSION}" && \
    ISO_URL="https://download.freebsd.org/releases/${ARCH}/${VERSION}/FreeBSD-${VERSION}-${ARCH}-disc1.iso" && \
    curl -L -o freebsd.iso "${ISO_URL}"

COPY scripts/ /scripts/
RUN chmod +x /scripts/*

RUN qemu-img create -f qcow2 /freebsd/disk.qcow2 10G
RUN /scripts/install-freebsd.sh

EXPOSE 22
ENV MEMORY=1G CPUS=2

HEALTHCHECK --interval=30s --timeout=10s \
    CMD /scripts/health-check.sh

ENTRYPOINT ["/scripts/entrypoint.sh"]
CMD ["start"]
#+end_src

** docker-compose.yml

#+begin_src yaml :tangle docker-compose.yml
version: '3.8'

services:
  freebsd:
    build: .
    image: aygp-dr/freebsd:14.0-RELEASE
    container_name: freebsd-vm
    privileged: true
    ports:
      - "2222:22"
    environment:
      - MEMORY=${MEMORY:-2G}
      - CPUS=${CPUS:-2}
    volumes:
      - ./workspace:/workspace:rw
    restart: unless-stopped
#+end_src

* Scripts

** entrypoint.sh

#+begin_src bash :tangle scripts/entrypoint.sh
set -e

MEMORY="${MEMORY:-1G}"
CPUS="${CPUS:-2}"
SSH_PORT="${SSH_PORT:-22}"

QEMU_OPTS=(
    -m "${MEMORY}"
    -smp "${CPUS}"
    -drive "file=/freebsd/disk.qcow2,format=qcow2,if=virtio"
    -netdev "user,id=net0,hostfwd=tcp::${SSH_PORT}-:22"
    -device "virtio-net,netdev=net0"
    -nographic
)

# Add KVM if available
[ -e /dev/kvm ] && QEMU_OPTS+=(-enable-kvm -cpu host) || QEMU_OPTS+=(-cpu qemu64)

case "$1" in
    start)
        echo "Starting FreeBSD VM (Memory: $MEMORY, CPUs: $CPUS)"
        exec qemu-system-x86_64 "${QEMU_OPTS[@]}"
        ;;
    ssh)
        ssh -o StrictHostKeyChecking=no -p "${SSH_PORT}" root@localhost
        ;;
    *)
        exec "$@"
        ;;
esac
#+end_src

** install-freebsd.sh

#+begin_src bash :tangle scripts/install-freebsd.sh
set -e

echo "Automated FreeBSD installation..."

cat > /tmp/installerconfig << 'EOF'
PARTITIONS="AUTO"
echo 'freebsd' | pw usermod root -h 0
echo 'sshd_enable="YES"' >> /etc/rc.conf
echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config
echo 'ifconfig_vtnet0="DHCP"' >> /etc/rc.conf
env ASSUME_ALWAYS_YES=YES pkg bootstrap
pkg install -y bash git python3
EOF

qemu-system-x86_64 \
    -m 2G \
    -drive file=/freebsd/disk.qcow2,format=qcow2,if=virtio \
    -cdrom /freebsd/freebsd.iso \
    -boot d \
    -nographic \
    -no-reboot \
    < /tmp/installerconfig || true

rm -f /freebsd/freebsd.iso
#+end_src

** health-check.sh

#+begin_src bash :tangle scripts/health-check.sh
pgrep -f "qemu-system-x86_64" > /dev/null || exit 1
nc -z localhost "${SSH_PORT:-22}" 2>/dev/null || exit 1
exit 0
#+end_src

* Build System

** Makefile

#+begin_src makefile :tangle Makefile
DOCKER_USER = aygp-dr
IMAGE_NAME = freebsd
VERSION ?= 14.0-RELEASE
IMAGE = $(DOCKER_USER)/$(IMAGE_NAME):$(VERSION)

.PHONY: build run push clean

build:
	docker build --build-arg FREEBSD_VERSION=$(VERSION) -t $(IMAGE) .

run:
	docker run -it --rm --privileged -p 2222:22 $(IMAGE)

push: build
	docker push $(IMAGE)

clean:
	docker rmi -f $(IMAGE) || true
#+end_src

* CI/CD

** .github/workflows/build.yml

#+begin_src yaml :tangle .github/workflows/build.yml
name: Build FreeBSD Docker Image

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ['14.0-RELEASE', '13.2-RELEASE']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: aygp-dr/freebsd:${{ matrix.version }}
          build-args: |
            FREEBSD_VERSION=${{ matrix.version }}
#+end_src

* Documentation

** README.md

#+begin_src markdown :tangle README.md
# FreeBSD Docker Image

Run FreeBSD in Docker using QEMU virtualization.

## Quick Start

```bash
# Run FreeBSD
docker run -it --rm --privileged aygp-dr/freebsd:14.0-RELEASE

# With SSH access
docker run -d --privileged -p 2222:22 aygp-dr/freebsd:14.0-RELEASE
ssh -p 2222 root@localhost  # password: freebsd
```

## Building

```bash
make build
make run
```

## Architecture

```mermaid
graph TD
    Docker[Docker Container] --> QEMU[QEMU Process]
    QEMU --> BSD[FreeBSD VM]
    BSD --> Kernel[FreeBSD Kernel]
    Kernel --> Services[SSH/Services]
```

## License

MIT
#+end_src

** .gitignore

#+begin_src text :tangle .gitignore
.DS_Store
*.swp
.env
*.qcow2
*.iso
workspace/*
!workspace/.gitkeep
#+end_src

** workspace/.gitkeep

#+begin_src text :tangle workspace/.gitkeep
#+end_src

* Usage

After tangling, the repository is ready:

#+begin_src bash :tangle no
# Initialize and build
git init
git add .
git commit -m "Initial commit: FreeBSD Docker image"
git remote add origin git@github.com:aygp-dr/freebsd-docker.git

# Build and test
make build
make run
#+end_src
#+end_src
